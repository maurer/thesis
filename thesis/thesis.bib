
@inproceedings{dewey-uncovering-2015,
  title = {Uncovering {{Use}}-{{After}}-{{Free Conditions}} in {{Compiled Code}}},
  booktitle = {Availability, {{Reliability}} and {{Security}} ({{ARES}}), 2015 10th {{International Conference}} On},
  publisher = {{IEEE}},
  author = {Dewey, David and Reaves, Bradley and Traynor, Patrick},
  year = {2015},
  keywords = {low-quality,use-after-free,binary-analysis,windows,static-analysis},
  pages = {90--99},
  file = {/home/maurer/Zotero/storage/SVJ5BG9X/uaf15.pdf}
}

@inproceedings{dangnull,
  title = {Preventing {{Use}}-after-Free with {{Dangling Pointers Nullification}}},
  isbn = {978-1-891562-38-9},
  doi = {10.14722/ndss.2015.23238},
  language = {en},
  publisher = {{Internet Society}},
  author = {Lee, Byoungyoung and Song, Chengyu and Jang, Yeongjin and Wang, Tielei and Kim, Taesoo and Lu, Long and Lee, Wenke},
  year = {2015},
  keywords = {unread},
  file = {/home/maurer/Zotero/storage/D7DMJPCX/leedangnull.pdf}
}

@inproceedings{undangle,
  title = {Undangle: Early Detection of Dangling Pointers in Use-after-Free and Double-Free Vulnerabilities},
  shorttitle = {Undangle},
  booktitle = {Proceedings of the 2012 {{International Symposium}} on {{Software Testing}} and {{Analysis}}},
  publisher = {{ACM}},
  author = {Caballero, Juan and Grieco, Gustavo and Marron, Mark and Nappa, Antonio},
  year = {2012},
  keywords = {use-after-free,binary-analysis,dynamic-analysis},
  pages = {133--143},
  file = {/home/maurer/Zotero/storage/UIWVV64C/p133-caballero.pdf}
}

@article{gueb,
  title = {Statically Detecting Use after Free on Binary Code},
  volume = {10},
  issn = {2263-8733},
  doi = {10.1007/s11416-014-0203-1},
  language = {en},
  number = {3},
  journal = {Journal of Computer Virology and Hacking Techniques},
  author = {Feist, Josselin and Mounier, Laurent and Potet, Marie-Laure},
  month = aug,
  year = {2014},
  keywords = {unread},
  pages = {211-217},
  file = {/home/maurer/Zotero/storage/YNDN8LUS/10.1007s11416-014-0203-1.pdf}
}

@inproceedings{bap,
  title = {{{BAP}}: {{A}} Binary Analysis Platform},
  shorttitle = {{{BAP}}},
  booktitle = {International {{Conference}} on {{Computer Aided Verification}}},
  publisher = {{Springer}},
  author = {Brumley, David and Jager, Ivan and Avgerinos, Thanassis and Schwartz, Edward J.},
  year = {2011},
  keywords = {binary-analysis,aegis,framework,bap},
  pages = {463--469},
  file = {/home/maurer/Zotero/storage/SCTDAPXY/1e17142563013365daa8526a1323f123961a.pdf}
}

@inproceedings{codesurfer,
  title = {{{CodeSurfer}}/X86\textemdash{{A}} Platform for Analyzing X86 Executables},
  booktitle = {International {{Conference}} on {{Compiler Construction}}},
  publisher = {{Springer}},
  author = {Balakrishnan, Gogul and Gruian, Radu and Reps, Thomas and Teitelbaum, Tim},
  year = {2005},
  keywords = {binary-analysis,platform},
  pages = {250--254},
  file = {/home/maurer/Zotero/storage/WBW4FVZ6/978-3-540-31985-6_19.pdf}
}

@phdthesis{gola_detecting_2010,
  title = {Detecting Aliased Stale Pointers via Static Analysis: {{An}} Architecture Independent Practical Application of Pointer Analysis and Graph Theory to Find Bugs in Binary Code},
  school = {Politecnico di Milano},
  author = {Gola, Giovanni and Iozzo, Vincenzo},
  year = {2010},
  keywords = {binary-analysis,unread,alias-analysis},
  file = {/home/maurer/Zotero/storage/SUBEYZFR/paper - Trail of Bits.pdf}
}

@phdthesis{vsa,
  type = {{{PhD}}},
  title = {{{WYSINWYX}}: {{What You See}} Is Not {{What You Execute}}},
  school = {University of Wisconsin-Madison},
  author = {Balakrishnan, Gogul},
  year = {2007},
  keywords = {binary-analysis,static-analysis},
  file = {/home/maurer/Zotero/storage/Y4LNI94Y/download.pdf}
}

@misc{asan,
  title = {{{AddressSanitizer}} \textemdash{} {{Clang}} 7 Documentation},
  howpublished = {https://clang.llvm.org/docs/AddressSanitizer.html},
  file = {/home/maurer/Zotero/storage/VNE4PELP/AddressSanitizer.html}
}

@misc{valgrind,
  title = {Valgrind},
  file = {/home/maurer/Zotero/storage/79KSUWIW/valgrind_manual.pdf}
}

@inproceedings{steensgaard-alias,
  title = {Points-to Analysis in Almost Linear Time},
  booktitle = {Proceedings of the 23rd {{ACM SIGPLAN}}-{{SIGACT}} Symposium on {{Principles}} of Programming Languages},
  publisher = {{ACM}},
  author = {Steensgaard, Bjarne},
  year = {1996},
  keywords = {alias-analysis,static-analyis},
  pages = {32--41},
  file = {/home/maurer/Zotero/storage/VZX8BUV5/p32-steensgaard.pdf}
}

@phdthesis{andersen-alias,
  type = {{{PhD Thesis}}},
  title = {Program Analysis and Specialization for the {{C}} Programming Language},
  school = {University of Cophenhagen},
  author = {Andersen, Lars Ole},
  year = {1994},
  keywords = {static-analysis,alias-analysis},
  file = {/home/maurer/Zotero/storage/6S34M5M8/e971a34a0f2482e0b2520ffb31062dcdde62.pdf}
}

@inproceedings{sfs,
  title = {Flow-Sensitive Pointer Analysis for Millions of Lines of Code},
  booktitle = {Code {{Generation}} and {{Optimization}} ({{CGO}}), 2011 9th {{Annual IEEE}}/{{ACM International Symposium}} On},
  publisher = {{IEEE}},
  author = {Hardekopf, Ben and Lin, Calvin},
  year = {2011},
  keywords = {static-analysis,alias-analysis},
  pages = {289--298},
  file = {/home/maurer/Zotero/storage/3HLZ3MF9/cgo11.pdf}
}

@misc{juliet,
  title = {Juliet {{Test Suite}} (1.3)},
  shorttitle = {Juliet},
  publisher = {{NIST, NSA}}
}

@article{angr-sok,
  title = {({{State}} of) {{The Art}} of {{War}}: {{Offensive Techniques}} in {{Binary Analysis}}},
  abstract = {Finding and exploiting vulnerabilities in binary code is a challenging task. The lack of high-level, semantically rich information about data structures and control constructs makes the analysis of program properties harder to scale. However, the importance of binary analysis is on the rise. In many situations binary analysis is the only possible way to prove (or disprove) properties about the code that is actually executed. In this paper, we present a binary analysis framework that implements a number of analysis techniques that have been proposed in the past. We present a systematized implementation of these techniques, which allows other researchers to compose them and develop new approaches. In addition, the implementation of these techniques in a unifying framework allows for the direct comparison of these approaches and the identification of their advantages and disadvantages. The evaluation included in this paper is performed using a recent dataset created by DARPA for evaluating the effectiveness of binary vulnerability analysis techniques.},
  language = {en},
  author = {Shoshitaishvili, Yan and Wang, Ruoyu and Salls, Christopher and Stephens, Nick and Polino, Mario and Dutcher, Audrey and Grosen, John and Feng, Siji and Hauser, Christophe and Kruegel, Christopher and Vigna, Giovanni and Barbara, UC Santa},
  keywords = {binary-analysis,angr,shellphish,sok},
  pages = {20},
  file = {/home/maurer/Zotero/storage/S39A4RZP/Shoshitaishvili et al. - (State of) The Art of War Offensive Techniques in.pdf}
}

@inproceedings{janhunen_intertranslatability_1998,
  title = {On the Intertranslatability of Autoepistemic, Default and Priority Logics, and Parallel Circumscription},
  booktitle = {European {{Workshop}} on {{Logics}} in {{Artificial Intelligence}}},
  publisher = {{Springer}},
  author = {Janhunen, Tomi},
  year = {1998},
  keywords = {unread,logic-programming,non-monotonic},
  pages = {216--232},
  file = {/home/maurer/Zotero/storage/R53I9E63/fbe00f68f9611ddedd7e0ee3771542b31835.pdf}
}

@phdthesis{filardo_dyna_,
  title = {Dyna 2: {{Towards}} a {{General Weighted Logic Language}}},
  language = {en},
  author = {Filardo, Nathaniel Wesley},
  file = {/home/maurer/Zotero/storage/DEXMETUA/Filardo - Dyna 2 Towards a General Weighted Logic Language.pdf}
}

@inproceedings{byteweight,
  address = {Berkeley, CA, USA},
  series = {SEC'14},
  title = {{{BYTEWEIGHT}}: {{Learning}} to {{Recognize Functions}} in {{Binary Code}}},
  isbn = {978-1-931971-15-7},
  shorttitle = {{{BYTEWEIGHT}}},
  abstract = {Function identification is a fundamental challenge in reverse engineering and binary program analysis. For instance, binary rewriting and control flow integrity rely on accurate function detection and identification in binaries. Although many binary program analyses assume functions can be identified a priori, identifying functions in stripped binaries remains a challenge. In this paper, we propose BYTEWEIGHT, a new automatic function identification algorithm. Our approach automatically learns key features for recognizing functions and can therefore easily be adapted to different platforms, new compilers, and new optimizations. We evaluated our tool against three well-known tools that feature function identification: IDA, BAP, and Dyninst. Our data set consists of 2,200 binaries created with three different compilers, with four different optimization levels, and across two different operating systems. In our experiments with 2,200 binaries, we found that BYTE-WEIGHT missed 44,621 functions in comparison with the 266,672 functions missed by the industry-leading tool IDA. Furthermore, while IDA misidentified 459,247 functions, BYTEWEIGHT misidentified only 43,992 functions.},
  booktitle = {Proceedings of the 23rd {{USENIX Conference}} on {{Security Symposium}}},
  publisher = {{USENIX Association}},
  author = {Bao, Tiffany and Burket, Jonathan and Woo, Maverick and Turner, Rafael and Brumley, David},
  year = {2014},
  pages = {845--860},
  file = {/home/maurer/Zotero/storage/YR67C5PF/sec14-paper-bao.pdf}
}

@inproceedings{kastrinis_efficient_2018,
  title = {An Efficient Data Structure for Must-Alias Analysis},
  isbn = {978-1-4503-5644-2},
  doi = {10.1145/3178372.3179519},
  language = {en},
  publisher = {{ACM Press}},
  author = {Kastrinis, George and Balatsouras, George and Ferles, Kostas and {Prokopaki-Kostopoulou}, Nefeli and Smaragdakis, Yannis},
  year = {2018},
  pages = {48-58},
  file = {/home/maurer/Zotero/storage/LSFFGHV6/must-datastruct-cc18.pdf}
}

@inproceedings{metal,
  address = {Berkeley, CA, USA},
  series = {OSDI'00},
  title = {Checking {{System Rules Using System}}-Specific, {{Programmer}}-Written {{Compiler Extensions}}},
  abstract = {Systems software such as OS kernels, embedded systems, and libraries must obey many rules for both correctness and performance. Common examples include "accesses to variable A must be guarded by lock B," "system calls must check user pointers for validity before using them," and "message handlers should free their buffers as quickly as possible to allow greater parallelism." Unfortunately, adherence to these rules is largely unchecked. This paper attacks this problem by showing how system implementors can use meta-level compilation (MC) to write simple, system-specific compiler extensions that automatically check their code for rule violations. By melding domain-specific knowledge with the automatic machinery of compilers, MC brings the benefits of language-level checking and optimizing to the higher, "meta" level of the systems implemented in these languages. This paper demonstrates the effectiveness of the MC approach by applying it to four complex, real systems: Linux, OpenBSD, the Xok exokernel, and the FLASH machine's embedded software. MC extensions found roughly 500 errors in these systems and led to numerous kernel patches. Most extensions were less than a hundred lines of code and written by implementors who had a limited understanding of the systems checked.},
  booktitle = {Proceedings of the 4th {{Conference}} on {{Symposium}} on {{Operating System Design}} \& {{Implementation}} - {{Volume}} 4},
  publisher = {{USENIX Association}},
  author = {Engler, Dawson and Chelf, Benjamin and Chou, Andy and Hallem, Seth},
  year = {2000},
  file = {/home/maurer/Zotero/storage/88VNXRGS/mc-osdi.pdf;/home/maurer/Zotero/storage/TVAA48M4/Engler et al. - 2000 - Checking System Rules Using System-specific, Progr.pdf}
}

@inproceedings{bddbddb,
  title = {Using Datalog with Binary Decision Diagrams for Program Analysis},
  booktitle = {Asian {{Symposium}} on {{Programming Languages}} and {{Systems}}},
  publisher = {{Springer}},
  author = {Whaley, John and Avots, Dzintars and Carbin, Michael and Lam, Monica S.},
  year = {2005},
  pages = {97--118},
  file = {/home/maurer/Zotero/storage/6RL2WPGT/aplas05.pdf}
}

@incollection{doop3,
  title = {Using {{Datalog}} for Fast and Easy Program Analysis},
  booktitle = {Datalog {{Reloaded}}},
  publisher = {{Springer}},
  author = {Smaragdakis, Yannis and Bravenboer, Martin},
  year = {2011},
  pages = {245--251},
  file = {/home/maurer/Zotero/storage/BAE66232/doop-datalog2.0.pdf}
}

@inproceedings{doop1,
  title = {Exception Analysis and Points-to Analysis: Better Together},
  shorttitle = {Exception Analysis and Points-to Analysis},
  booktitle = {Proceedings of the Eighteenth International Symposium on {{Software}} Testing and Analysis},
  publisher = {{ACM}},
  author = {Bravenboer, Martin and Smaragdakis, Yannis},
  year = {2009},
  pages = {1--12},
  file = {/home/maurer/Zotero/storage/EVKHCJJ9/p1-bravenboer.pdf}
}

@article{doop2,
  title = {Strictly Declarative Specification of Sophisticated Points-to Analyses},
  volume = {44},
  number = {10},
  journal = {ACM SIGPLAN Notices},
  author = {Bravenboer, Martin and Smaragdakis, Yannis},
  year = {2009},
  pages = {243--262},
  file = {/home/maurer/Zotero/storage/TT66C849/p243-bravenboer.pdf}
}

@inproceedings{logicblox,
  title = {Design and {{Implementation}} of the {{LogicBlox System}}},
  isbn = {978-1-4503-2758-9},
  doi = {10.1145/2723372.2742796},
  language = {en},
  publisher = {{ACM Press}},
  author = {Aref, Molham and {ten Cate}, Balder and Green, Todd J. and Kimelfeld, Benny and Olteanu, Dan and Pasalic, Emir and Veldhuizen, Todd L. and Washburn, Geoffrey},
  year = {2015},
  pages = {1371-1382},
  file = {/home/maurer/Zotero/storage/D7XUZ868/p1371-aref.pdf}
}

@inproceedings{lftj,
  title = {Leapfrog Triejoin: {{A}} Simple, Worst-Case Optimal Join Algorithm},
  shorttitle = {Leapfrog Triejoin},
  author = {Veldhuizen, Todd L.},
  year = {2014},
  file = {/home/maurer/Zotero/storage/ISCNF28J/Veldhuizen14.pdf}
}

@article{lftj-incr,
  archivePrefix = {arXiv},
  eprinttype = {arxiv},
  eprint = {1303.5313},
  primaryClass = {cs},
  title = {Incremental {{Maintenance}} for {{Leapfrog Triejoin}}},
  abstract = {We present an incremental maintenance algorithm for leapfrog triejoin. The algorithm maintains rules in time proportional (modulo log factors) to the edit distance between leapfrog triejoin traces.},
  journal = {arXiv:1303.5313 [cs]},
  author = {Veldhuizen, Todd L.},
  month = mar,
  year = {2013},
  keywords = {Computer Science - Data Structures and Algorithms,Computer Science - Databases},
  file = {/home/maurer/Zotero/storage/5BWW8MJP/Veldhuizen - 2013 - Incremental Maintenance for Leapfrog Triejoin.pdf;/home/maurer/Zotero/storage/WVCW62S5/1303.html}
}

@inproceedings{tac,
  title = {Machine-{{Learning}}-{{Guided Typestate Analysis}} for {{Static Use}}-{{After}}-{{Free Detection}}},
  isbn = {978-1-4503-5345-8},
  doi = {10.1145/3134600.3134620},
  language = {en},
  publisher = {{ACM Press}},
  author = {Yan, Hua and Sui, Yulei and Chen, Shiping and Xue, Jingling},
  year = {2017},
  pages = {42-54},
  file = {/home/maurer/Zotero/storage/LFCDICD6/acsac17.pdf}
}

@article{juliet-eval-static-source,
  title = {On the Capability of Static Code Analysis to Detect Security Vulnerabilities},
  volume = {68},
  issn = {09505849},
  doi = {10.1016/j.infsof.2015.08.002},
  language = {en},
  journal = {Information and Software Technology},
  author = {{Goseva-Popstojanova}, Katerina and Perhinschi, Andrei},
  month = dec,
  year = {2015},
  pages = {18-33},
  file = {/home/maurer/Zotero/storage/3QT7IDA4/1-s2.0-S0950584915001366-main.pdf}
}

@phdthesis{andersen,
  title = {Program Analysis and Specialization for the c Programming Language},
  school = {University of Cophenhagen},
  author = {Andersen, Lars},
  file = {/home/maurer/Zotero/storage/TQ7WK2DF/andersen-thesis94.pdf}
}

@inproceedings{interproc-dataflow,
  title = {Precise Interprocedural Dataflow Analysis via Graph Reachability},
  booktitle = {Proceedings of the 22nd {{ACM SIGPLAN}}-{{SIGACT}} Symposium on {{Principles}} of Programming Languages},
  publisher = {{ACM}},
  author = {Reps, Thomas and Horwitz, Susan and Sagiv, Mooly},
  year = {1995},
  pages = {49--61},
  file = {/home/maurer/Zotero/storage/RMSSJ54J/popl95.pdf}
}

@inproceedings{lvar,
  title = {{{LVars}}: Lattice-Based Data Structures for Deterministic Parallelism},
  isbn = {978-1-4503-2381-9},
  shorttitle = {{{LVars}}},
  doi = {10.1145/2502323.2502326},
  language = {en},
  publisher = {{ACM Press}},
  author = {Kuper, Lindsey and Newton, Ryan R.},
  year = {2013},
  pages = {71},
  file = {/home/maurer/Zotero/storage/7SN4BYCJ/lvars-fhpc13.pdf}
}

@incollection{alpuente2011,
  title = {Datalog-Based Program Analysis with {{BES}} and {{RWL}}},
  booktitle = {Datalog {{Reloaded}}},
  publisher = {{Springer}},
  author = {Alpuente, Mar\'ia and Feli\'u, Marco Antonio and Joubert, Christophe and Villanueva, Alicia},
  year = {2011},
  pages = {1--20},
  file = {/home/maurer/Zotero/storage/RMZUP9TA/f50a77bff6958313b6be2df4fa4d54fcd988.pdf}
}

@inproceedings{lam2005,
  title = {Context-Sensitive Program Analysis as Database Queries},
  booktitle = {Proceedings of the Twenty-Fourth {{ACM SIGMOD}}-{{SIGACT}}-{{SIGART}} Symposium on {{Principles}} of Database Systems},
  publisher = {{ACM}},
  author = {Lam, Monica S. and Whaley, John and Livshits, V. Benjamin and Martin, Michael C. and Avots, Dzintars and Carbin, Michael and Unkel, Christopher},
  year = {2005},
  pages = {1--12},
  file = {/home/maurer/Zotero/storage/NFK5D9E5/pods05.pdf}
}

@inproceedings{xie2005,
  title = {Context-and Path-Sensitive Memory Leak Detection},
  volume = {30},
  booktitle = {{{ACM SIGSOFT Software Engineering Notes}}},
  publisher = {{ACM}},
  author = {Xie, Yichen and Aiken, Alex},
  year = {2005},
  pages = {115--125},
  file = {/home/maurer/Zotero/storage/JZPH465S/fse05.pdf}
}

@techreport{brumley2006,
  title = {Alias Analysis for Assembly},
  institution = {{Technical Report CMU-CS-06-180, Carnegie Mellon University School of Computer Science}},
  author = {Brumley, David and Newsome, James},
  year = {2006},
  file = {/home/maurer/Zotero/storage/VGAVAJQB/CMU-CS-06-180R.pdf}
}

@article{mcallester2002,
  title = {On the Complexity Analysis of Static Analyses},
  volume = {49},
  issn = {00045411},
  doi = {10.1145/581771.581774},
  number = {4},
  journal = {Journal of the ACM},
  author = {McAllester, David},
  month = jul,
  year = {2002},
  pages = {512-537},
  file = {/home/maurer/Zotero/storage/ZI2IFJPI/mcallester-to-appear.pdf}
}

@inproceedings{kinder2008,
  title = {Jakstab: {{A}} Static Analysis Platform for Binaries},
  shorttitle = {Jakstab},
  booktitle = {International {{Conference}} on {{Computer Aided Verification}}},
  publisher = {{Springer}},
  author = {Kinder, Johannes and Veith, Helmut},
  year = {2008},
  pages = {423--427},
  file = {/home/maurer/Zotero/storage/NS6WS9YL/cav08.pdf}
}

@techreport{jakstab,
  title = {Static Analysis of X86 Executables},
  institution = {{Technische Universit\"at Darmstadt}},
  author = {Kinder, Johannes},
  year = {2010},
  file = {/home/maurer/Zotero/storage/A5QT23MJ/Kinder_-_Static_Analysis_of_x86_Executables.pdf}
}

@misc{ida,
  title = {{{IDA Pro}}: {{Hex}}-{{Rays}}},
  author = {Guilfanov, Ilfak}
}

@inproceedings{smash,
  title = {Compositional May-Must Program Analysis: Unleashing the Power of Alternation},
  volume = {45},
  shorttitle = {Compositional May-Must Program Analysis},
  booktitle = {{{ACM Sigplan Notices}}},
  publisher = {{ACM}},
  author = {Godefroid, Patrice and Nori, Aditya V. and Rajamani, Sriram K. and Tetali, Sai Deep},
  year = {2010},
  pages = {43--56},
  file = {/home/maurer/Zotero/storage/S8NYMHEW/smash.pdf}
}

@article{dash,
  title = {Proofs from Tests},
  volume = {36},
  number = {4},
  journal = {IEEE Transactions on Software Engineering},
  author = {Beckman, Nels E. and Nori, Aditya V. and Rajamani, Sriram K. and Simmons, Robert J. and Tetali, Sai Deep and Thakur, Aditya V.},
  year = {2010},
  pages = {495--508},
  file = {/home/maurer/Zotero/storage/LLDKWTEC/tse.pdf}
}

@inproceedings{bitblaze,
  title = {{{BitBlaze}}: {{A}} New Approach to Computer Security via Binary Analysis},
  shorttitle = {{{BitBlaze}}},
  booktitle = {International {{Conference}} on {{Information Systems Security}}},
  publisher = {{Springer}},
  author = {Song, Dawn and Brumley, David and Yin, Heng and Caballero, Juan and Jager, Ivan and Kang, Min Gyung and Liang, Zhenkai and Newsome, James and Poosankam, Pongsin and Saxena, Prateek},
  year = {2008},
  pages = {1--25},
  file = {/home/maurer/Zotero/storage/EPQ3F7UV/iciss08.pdf}
}

@misc{bindead,
  title = {Bindead},
  author = {Mihaila, Bogdan}
}

@inproceedings{wrappedintervals,
  title = {Signedness-Agnostic Program Analysis: {{Precise}} Integer Bounds for Low-Level Code},
  shorttitle = {Signedness-Agnostic Program Analysis},
  booktitle = {Asian {{Symposium}} on {{Programming Languages}} and {{Systems}}},
  publisher = {{Springer}},
  author = {Navas, Jorge A. and Schachte, Peter and S\o{}ndergaard, Harald and Stuckey, Peter J.},
  year = {2012},
  pages = {115--130},
  file = {/home/maurer/Zotero/storage/8RSGNFHT/wrapped-intervals-aplas12.pdf}
}

@article{wrappedintervals2,
  title = {Interval {{Analysis}} and {{Machine Arithmetic}}: {{Why Signedness Ignorance Is Bliss}}},
  volume = {37},
  issn = {01640925},
  shorttitle = {Interval {{Analysis}} and {{Machine Arithmetic}}},
  doi = {10.1145/2651360},
  language = {en},
  number = {1},
  journal = {ACM Transactions on Programming Languages and Systems},
  author = {Gange, Graeme and Navas, Jorge A. and Schachte, Peter and S\o{}ndergaard, Harald and Stuckey, Peter J.},
  month = jan,
  year = {2015},
  pages = {1-35},
  file = {/home/maurer/Zotero/storage/V8E243V4/ACM-TOPLAS-wrapped.pdf}
}

@misc{bitr,
  title = {\{\vphantom\}{{Bi}}\vphantom\{\}nary \{\vphantom\}{{T}}\vphantom\{\}ype \{\vphantom\}{{R}}\vphantom\{\}ecovery},
  author = {Maurer, Matthew},
  year = {2014},
  file = {/home/maurer/Zotero/storage/WCX68CTF/BiTR-0.pdf}
}

@misc{zzuf,
  title = {Zzuf},
  author = {Hocevar, Sam}
}

@misc{peach,
  title = {Peach},
  author = {Eddington, Michael}
}

@book{prologbook,
  title = {The {{Art}} of {{Prolog}}: {{Advanced Programming Techniques}}},
  publisher = {{MIT Press}},
  author = {Sterling, Leon and Shapiro, Ehud},
  year = {1994}
}

@inproceedings{divine,
  title = {Divine: {{Discovering}} Variables in Executables},
  shorttitle = {Divine},
  booktitle = {International {{Workshop}} on {{Verification}}, {{Model Checking}}, and {{Abstract Interpretation}}},
  publisher = {{Springer}},
  author = {Balakrishnan, Gogul and Reps, Thomas},
  year = {2007},
  pages = {1--28},
  file = {/home/maurer/Zotero/storage/KHCGTVGK/vmcai07.invited.pdf}
}

@inproceedings{phoenix,
  title = {Native X86 Decompilation Using Semantics-Preserving Structural Analysis and Iterative Control-Flow Structuring},
  volume = {16},
  booktitle = {Proceedings of the {{USENIX Security Symposium}}},
  author = {Schwartz, Edward J. and Lee, J. and Woo, Maverick and Brumley, David},
  year = {2013},
  file = {/home/maurer/Zotero/storage/6JILWJIH/usenix13.pdf}
}

@incollection{circumscription,
  title = {Circumscription\textemdash{}a Form of Non-Monotonic Reasoning},
  booktitle = {Readings in {{Artificial Intelligence}}},
  publisher = {{Elsevier}},
  author = {McCarthy, John},
  year = {1981},
  pages = {466--472},
  file = {/home/maurer/Zotero/storage/6XTZ9635/circumscription.pdf}
}

@article{sndwrite,
  title = {Scalable Variable and Data Type Detection in a Binary Rewriter},
  volume = {48},
  number = {6},
  journal = {ACM SIGPLAN Notices},
  author = {ElWazeer, Khaled and Anand, Kapil and Kotha, Aparna and Smithson, Matthew and Barua, Rajeev},
  year = {2013},
  pages = {51--60},
  file = {/home/maurer/Zotero/storage/9VUTQDDA/pldi.pdf}
}

@phdthesis{llvm,
  type = {{{PhD Thesis}}},
  title = {{{LLVM}}: {{An}} Infrastructure for Multi-Stage Optimization},
  shorttitle = {{{LLVM}}},
  school = {University of Illinois at Urbana-Champaign},
  author = {Lattner, Chris Arthur},
  year = {2002},
  file = {/home/maurer/Zotero/storage/53GIAW4N/2002-12-LattnerMSThesis.pdf}
}

@inproceedings{ramalingam2000,
  title = {On Loops, Dominators, and Dominance Frontier},
  isbn = {978-1-58113-199-4},
  doi = {10.1145/349299.349330},
  language = {en},
  booktitle = {Proceedings of the {{ACM SIGPLAN}} Conference on {{Programming}} Language Design and Implementation},
  publisher = {{ACM Press}},
  author = {Ramalingam, G.},
  year = {2000},
  pages = {233-241},
  file = {/home/maurer/Zotero/storage/MWAQKCAV/pldi00.pdf}
}

@inproceedings{jsinfer,
  title = {Fast and {{Precise Hybrid Type Inference}} for {{JavaScript}}},
  abstract = {JavaScript performance is often bound by its dynamically typed nature. Compilers do not have access to static type information, making generation of efficient, type-specialized machine code difficult. We seek to solve this problem by inferring types. In this paper we present a hybrid type inference algorithm for JavaScript based on points-to analysis. Our algorithm is fast, in that it pays for itself in the optimizations it enables. Our algorithm is also precise, generating information that closely reflects the program's actual behavior even when analyzing polymorphic code, by augmenting static analysis with run-time type barriers. We showcase an implementation for Mozilla Firefox's Java-Script engine, demonstrating both performance gains and viability. Through integration with the just-in-time (JIT) compiler in Firefox, we have improved performance on major benchmarks and JavaScript-heavy websites by up to 50\%. Inference-enabled compilation is the default compilation mode as of Firefox 9.},
  booktitle = {In {{PLDI}}},
  author = {Hackett, Brian and Guo, Shu-yu},
  year = {2012},
  file = {/home/maurer/Zotero/storage/2G525FFJ/Hackett and Guo - 2012 - Fast and Precise Hybrid Type Inference for JavaScr.pdf;/home/maurer/Zotero/storage/3T7B5W97/summary.html}
}

@inproceedings{howard,
  title = {Howard: {{A Dynamic Excavator}} for {{Reverse Engineering Data Structures}}.},
  shorttitle = {Howard},
  booktitle = {{{NDSS}}},
  publisher = {{Citeseer}},
  author = {Slowinska, Asia and Stancescu, Traian and Bos, Herbert},
  year = {2011},
  file = {/home/maurer/Zotero/storage/6PA3HU4E/howard_ndss11.pdf}
}

@inproceedings{rebert2014,
  address = {Berkeley, CA, USA},
  series = {SEC'14},
  title = {Optimizing {{Seed Selection}} for {{Fuzzing}}},
  isbn = {978-1-931971-15-7},
  abstract = {Randomly mutating well-formed program inputs or simply fuzzing, is a highly effective and widely used strategy to find bugs in software. Other than showing fuzzers find bugs, there has been little systematic effort in understanding the science of how to fuzz properly. In this paper, we focus on how to mathematically formulate and reason about one critical aspect in fuzzing: how best to pick seed files to maximize the total number of bugs found during a fuzz campaign. We design and evaluate six different algorithms using over 650 CPU days on Amazon Elastic Compute Cloud (EC2) to provide ground truth data. Overall, we find 240 bugs in 8 applications and show that the choice of algorithm can greatly increase the number of bugs found. We also show that current seed selection strategies as found in Peach may fare no better than picking seeds at random. We make our data set and code publicly available.},
  booktitle = {Proceedings of the 23rd {{USENIX Conference}} on {{Security Symposium}}},
  publisher = {{USENIX Association}},
  author = {Rebert, Alexandre and Cha, Sang Kil and Avgerinos, Thanassis and Foote, Jonathan and Warren, David and Grieco, Gustavo and Brumley, David},
  year = {2014},
  pages = {861--875},
  file = {/home/maurer/Zotero/storage/4C35UU8J/sec14-paper-rebert.pdf}
}

@inproceedings{klee,
  address = {Berkeley, CA, USA},
  series = {OSDI'08},
  title = {{{KLEE}}: {{Unassisted}} and {{Automatic Generation}} of {{High}}-Coverage {{Tests}} for {{Complex Systems Programs}}},
  shorttitle = {{{KLEE}}},
  abstract = {We present a new symbolic execution tool, KLEE, capable of automatically generating tests that achieve high coverage on a diverse set of complex and environmentally-intensive programs. We used KLEE to thoroughly check all 89 stand-alone programs in the GNU COREUTILS utility suite, which form the core user-level environment installed on millions of Unix systems, and arguably are the single most heavily tested set of open-source programs in existence. KLEE-generated tests achieve high line coverage -- on average over 90\% per tool (median: over 94\%) -- and significantly beat the coverage of the developers' own hand-written test suite. When we did the same for 75 equivalent tools in the BUSYBOX embedded system suite, results were even better, including 100\% coverage on 31 of them. We also used KLEE as a bug finding tool, applying it to 452 applications (over 430K total lines of code), where it found 56 serious bugs, including three in COREUTILS that had been missed for over 15 years. Finally, we used KLEE to crosscheck purportedly identical BUSYBOX and COREUTILS utilities, finding functional correctness errors and a myriad of inconsistencies.},
  booktitle = {Proceedings of the 8th {{USENIX Conference}} on {{Operating Systems Design}} and {{Implementation}}},
  publisher = {{USENIX Association}},
  author = {Cadar, Cristian and Dunbar, Daniel and Engler, Dawson},
  year = {2008},
  pages = {209--224},
  file = {/home/maurer/Zotero/storage/2244FYNL/2008-03.pdf}
}

@inproceedings{godefroid2008,
  address = {New York, NY, USA},
  series = {PLDI '08},
  title = {Grammar-Based {{Whitebox Fuzzing}}},
  isbn = {978-1-59593-860-2},
  doi = {10.1145/1375581.1375607},
  abstract = {Whitebox fuzzing is a form of automatic dynamic test generation, based on symbolic execution and constraint solving, designed for security testing of large applications. Unfortunately, the current effectiveness of whitebox fuzzing is limited when testing applications with highly-structured inputs, such as compilers and interpreters. These applications process their inputs in stages, such as lexing, parsing and evaluation. Due to the enormous number of control paths in early processing stages, whitebox fuzzing rarely reaches parts of the application beyond those first stages. In this paper, we study how to enhance whitebox fuzzing of complex structured-input applications with a grammar-based specification of their valid inputs. We present a novel dynamic test generation algorithm where symbolic execution directly generates grammar-based constraints whose satisfiability is checked using a custom grammar-based constraint solver. We have implemented this algorithm and evaluated it on a large security-critical application, the JavaScript interpreter of Internet Explorer 7 (IE7). Results of our experiments show that grammar-based whitebox fuzzing explores deeper program paths and avoids dead-ends due to non-parsable inputs. Compared to regular whitebox fuzzing, grammar-based whitebox fuzzing increased coverage of the code generation module of the IE7 JavaScript interpreter from 53\% to 81\% while using three times fewer tests.},
  booktitle = {Proceedings of the 29th {{ACM SIGPLAN Conference}} on {{Programming Language Design}} and {{Implementation}}},
  publisher = {{ACM}},
  author = {Godefroid, Patrice and Kiezun, Adam and Levin, Michael Y.},
  year = {2008},
  keywords = {automatic test generation,grammars,program verification,software testing},
  pages = {206--215},
  file = {/home/maurer/Zotero/storage/KLBBYFY8/pldi-kiezun.pdf}
}

@inproceedings{avgerinos2014,
  address = {New York, NY, USA},
  series = {ICSE 2014},
  title = {Enhancing {{Symbolic Execution}} with {{Veritesting}}},
  isbn = {978-1-4503-2756-5},
  doi = {10.1145/2568225.2568293},
  abstract = {We present MergePoint, a new binary-only symbolic execution system for large-scale and fully unassisted testing of commodity off-the-shelf (COTS) software. MergePoint introduces veritesting, a new technique that employs static symbolic execution to amplify the effect of dynamic symbolic execution. Veritesting allows MergePoint to find twice as many bugs, explore orders of magnitude more paths, and achieve higher code coverage than previous dynamic symbolic execution systems. MergePoint is currently running daily on a 100 node cluster analyzing 33,248 Linux binaries; has generated more than 15 billion SMT queries, 200 million test cases, 2,347,420 crashes, and found 11,687 bugs in 4,379 distinct applications.},
  booktitle = {Proceedings of the 36th {{International Conference}} on {{Software Engineering}}},
  publisher = {{ACM}},
  author = {Avgerinos, Thanassis and Rebert, Alexandre and Cha, Sang Kil and Brumley, David},
  year = {2014},
  keywords = {Symbolic Execution,Verification,Veritesting},
  pages = {1083--1094},
  file = {/home/maurer/Zotero/storage/JPJ6PPBL/veritesting-icse-2014.pdf}
}

@inproceedings{mayhem,
  title = {Unleashing {{Mayhem}} on {{Binary Code}}},
  doi = {10.1109/SP.2012.31},
  abstract = {In this paper we present Mayhem, a new system for automatically finding exploitable bugs in binary (i.e., executable) programs. Every bug reported by Mayhem is accompanied by a working shell-spawning exploit. The working exploits ensure soundness and that each bug report is security-critical and actionable. Mayhem works on raw binary code without debugging information. To make exploit generation possible at the binary-level, Mayhem addresses two major technical challenges: actively managing execution paths without exhausting memory, and reasoning about symbolic memory indices, where a load or a store address depends on user input. To this end, we propose two novel techniques: 1) hybrid symbolic execution for combining online and offline (concolic) execution to maximize the benefits of both techniques, and 2) index-based memory modeling, a technique that allows Mayhem to efficiently reason about symbolic memory at the binary level. We used Mayhem to find and demonstrate 29 exploitable vulnerabilities in both Linux and Windows programs, 2 of which were previously undocumented.},
  booktitle = {2012 {{IEEE Symposium}} on {{Security}} and {{Privacy}}},
  author = {Cha, S. K. and Avgerinos, T. and Rebert, A. and Brumley, D.},
  month = may,
  year = {2012},
  keywords = {active managing execution paths,binary codes,Binary codes,binary programs,binary-level,bug report,Computer bugs,concolic execution,Concrete,Engines,executable programs,exploit generation,hybrid execution,hybrid symbolic execution,index-based memory modeling,Linux programs,Mayhem,Memory management,offline execution,online execution,program debugging,raw binary code,Servers,Switches,symbolic memory,symbolic memory indices,Windows programs,working shell-spawning exploit},
  pages = {380-394},
  file = {/home/maurer/Zotero/storage/6733AWG8/Cha et al. - 2012 - Unleashing Mayhem on Binary Code.pdf;/home/maurer/Zotero/storage/D568ZYUY/6234425.html}
}

@article{aeg,
  title = {Automatic {{Exploit Generation}}},
  volume = {57},
  issn = {0001-0782},
  doi = {10.1145/2560217.2560219},
  abstract = {The idea is to identify security-critical software bugs so they can be fixed first.},
  number = {2},
  journal = {Commun. ACM},
  author = {Avgerinos, Thanassis and Cha, Sang Kil and Rebert, Alexandre and Schwartz, Edward J. and Woo, Maverick and Brumley, David},
  month = feb,
  year = {2014},
  pages = {74--84},
  file = {/home/maurer/Zotero/storage/4YWN4735/aeg-current.pdf}
}

@inproceedings{tie,
  title = {{{TIE}}: {{Principled Reverse Engineering}} of {{Types}} in {{Binary Programs}}.},
  shorttitle = {{{TIE}}},
  booktitle = {Proceedings of the {{Network}} and {{Distributed System Security Symposium}}},
  author = {Lee, JongHyup and Avgerinos, Thanassis and Brumley, David},
  month = jan,
  year = {2011},
  file = {/home/maurer/Zotero/storage/5G38TVPC/tie-ndss-2011.pdf}
}

@inproceedings{nprr,
  title = {Worst-Case Optimal Join Algorithms},
  booktitle = {Proceedings of the 31st {{ACM SIGMOD}}-{{SIGACT}}-{{SIGAI}} Symposium on {{Principles}} of {{Database Systems}}},
  publisher = {{ACM}},
  author = {Ngo, Hung Q. and Porat, Ely and R\'e, Christopher and Rudra, Atri},
  year = {2012},
  pages = {37--48},
  file = {/home/maurer/Zotero/storage/JFQHPY4B/paper49.Ngo.pdf}
}

@inproceedings{agm,
  title = {Size Bounds and Query Plans for Relational Joins},
  abstract = {Relational joins are at the core of relational algebra, which in turn is the core of the standard database query language SQL. As their evaluation is expensive and very often dominated by the output size, it is an important task for database query optimisers to compute estimates on the size of joins and to find good execution plans for sequences of joins. We study these problems from a theoretical perspective, both in the worst-case model, and in an average-case model where the database is chosen according to a known probability distribution. In the former case, our first key observation is that the worst-case size of a query is characterised by the fractional edge cover number of its underlying hypergraph, a combinatorial parameter previously known to provide an upper bound. We complete the picture by proving a matching lower bound, and by showing that there exist queries for which the join-project plan suggested by the fractional edge cover approach may be substantially better than any join plan that does not use intermediate projections. On the other hand, we show that in the averagecase model, every join-project plan can be turned into a plan containing no projections in such a way that the expected time to evaluate the plan increases only by a constant factor independent of the size of the database. Not surprisingly, the key combinatorial parameter in this context is the maximum density of the underlying hypergraph. We show how to make effective use of this parameter to eliminate the projections.},
  booktitle = {In {{FOCS}} (2008},
  author = {Atserias, Albert and Grohe, Martin and Marx, D\'aniel},
  pages = {739--748},
  file = {/home/maurer/Zotero/storage/ZZHB6GX3/Atserias et al. - Size bounds and query plans for relational joins.pdf;/home/maurer/Zotero/storage/HD5NRXZ8/summary.html}
}

@inproceedings{stable-model,
  title = {The Stable Model Semantics for Logic Programming.},
  volume = {88},
  booktitle = {{{ICLP}}/{{SLP}}},
  author = {Gelfond, Michael and Lifschitz, Vladimir},
  year = {1988},
  pages = {1070--1080},
  file = {/home/maurer/Zotero/storage/DELD7PHL/Gelfond and Lifschitz - 1988 - The stable model semantics for logic programming..pdf;/home/maurer/Zotero/storage/G3PULW6U/Gelfond and Lifschitz - 1988 - The stable model semantics for logic programming..pdf}
}

@article{wellfounded,
  title = {The Well-Founded Semantics for General Logic Programs},
  volume = {38},
  number = {3},
  journal = {Journal of the ACM (JACM)},
  author = {Van Gelder, Allen and Ross, Kenneth A. and Schlipf, John S.},
  year = {1991},
  pages = {619--649},
  file = {/home/maurer/Zotero/storage/9MSTBAYL/Van Gelder et al. - 1991 - The well-founded semantics for general logic progr.pdf;/home/maurer/Zotero/storage/4Q82B5ZI/citation.html}
}

@inproceedings{wf-agg,
  title = {The Well-Founded Semantics of Aggregation},
  booktitle = {Proceedings of the Eleventh {{ACM SIGACT}}-{{SIGMOD}}-{{SIGART}} Symposium on {{Principles}} of Database Systems},
  publisher = {{ACM}},
  author = {Van Gelder, Allen},
  year = {1992},
  pages = {127--138},
  file = {/home/maurer/Zotero/storage/58XVSCST/Van Gelder - 1992 - The well-founded semantics of aggregation.ps;/home/maurer/Zotero/storage/LSD52J4E/citation.html}
}

@inproceedings{peloton,
  title = {Self-{{Driving Database Management Systems}}.},
  booktitle = {{{CIDR}}},
  author = {Pavlo, Andrew and Angulo, Gustavo and Arulraj, Joy and Lin, Haibin and Lin, Jiexi and Ma, Lin and Menon, Prashanth and Mowry, Todd C. and Perron, Matthew and Quah, Ian},
  year = {2017},
  file = {/home/maurer/Zotero/storage/NIRUGL55/p42-pavlo-cidr17.pdf}
}

@article{tetris,
  archivePrefix = {arXiv},
  eprinttype = {arxiv},
  eprint = {1404.0703},
  primaryClass = {cs},
  title = {Joins via {{Geometric Resolutions}}: {{Worst}}-Case and {{Beyond}}},
  shorttitle = {Joins via {{Geometric Resolutions}}},
  abstract = {We present a simple geometric framework for the relational join. Using this framework, we design an algorithm that achieves the fractional hypertree-width bound, which generalizes classical and recent worst-case algorithmic results on computing joins. In addition, we use our framework and the same algorithm to show a series of what are colloquially known as beyond worst-case results. The framework allows us to prove results for data stored in Btrees, multidimensional data structures, and even multiple indices per table. A key idea in our framework is formalizing the inference one does with an index as a type of geometric resolution; transforming the algorithmic problem of computing joins to a geometric problem. Our notion of geometric resolution can be viewed as a geometric analog of logical resolution. In addition to the geometry and logic connections, our algorithm can also be thought of as backtracking search with memoization.},
  journal = {arXiv:1404.0703 [cs]},
  author = {Khamis, Mahmoud Abo and Ngo, Hung Q. and R\'e, Christopher and Rudra, Atri},
  month = apr,
  year = {2014},
  keywords = {Computer Science - Data Structures and Algorithms,Computer Science - Databases},
  file = {/home/maurer/Zotero/storage/454PGLCB/Khamis et al. - 2014 - Joins via Geometric Resolutions Worst-case and Be.pdf;/home/maurer/Zotero/storage/87K9B2QL/1404.html}
}


